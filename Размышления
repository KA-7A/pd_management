План на сегодня:

Механизм ролей:
- Тип роли — определяет, какие столбцы из каких таблиц доступны
- Экземпляр роли — накладывает тип роли на конкретного пользователя
- Роли наследуемы
 - - При наследовании поле можно открыть или закрыть

Задача на сегодня
- Вывести таблицу с существующими ролями
- Добавить роль (в т.ч. с механизмом наследования)
- Начать проработку api
- - ../api/role/add/
	{ ”v_name” : string,
	  ”id_parent”: nullable,
	  ”properties”:
 	  {
 	  	”v_table_name”:
		”v_column_name”:
 		”b_access”: {0, 1} — нет доступа, есть доступ
 	  }
	}
- - ../api/role/{id}	— получить инфу о роли
	— Подтянуть сюда список таблиц и их полей, к которым у роли есть доступ
	— Подтянуть ID экземпляров?

- - ../api/role/edit/{id}
	{ ”id_role”, ,
	  ”properties”: — nullable, описываем только изменяемые свойства
 	  {
 	  	”v_table_name”:
		”v_column_name”:
 		”b_access”: {0, 1} — нет доступа, есть доступ
 	  }
	}
- - ../api/role/delete/{id}
	— удаляем целую роль.
	— Что при этом должно происходить?
		Похоже, что все экземпляры этой роли должны встать в статус b_deleted = 1

А что вообще нужно знать про тип роли?
- ID
- Название

Дальше маппинг из ID роли к таблице и полю?

А название таблицы и поля будем хранить в маппинге.
Можно стрельнуть механизм с ID_MASTER_TYPE и ID_MASTER_INST

Что нужно знать про экземпляр роли?
- ID_INST
- DT_START
- DT_STOP
- B_DELETED
- ID_USER

Итак, что перед ролями:
- Пользователь
- pd_master_types -- ID_MASTER_TYPE, V_NAME
- Какая-нибудь таблица с секретиками
- Динамические запросы, получается
